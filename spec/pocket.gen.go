// package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for QueryHeightAndApplicationsOptsStakingStatus.
const (
	QueryHeightAndApplicationsOptsStakingStatusN1Unstaking QueryHeightAndApplicationsOptsStakingStatus = 1 // unstaking

	QueryHeightAndApplicationsOptsStakingStatusN2Staked QueryHeightAndApplicationsOptsStakingStatus = 2 // staked

)

// Defines values for QueryHeightAndValidatorsOptsJailedStatus.
const (
	QueryHeightAndValidatorsOptsJailedStatusN1Jailed QueryHeightAndValidatorsOptsJailedStatus = 1 // jailed

	QueryHeightAndValidatorsOptsJailedStatusN2Unjailed QueryHeightAndValidatorsOptsJailedStatus = 2 // unjailed

)

// Defines values for QueryHeightAndValidatorsOptsStakingStatus.
const (
	QueryHeightAndValidatorsOptsStakingStatusN1Unstaking QueryHeightAndValidatorsOptsStakingStatus = 1 // unstaking

	QueryHeightAndValidatorsOptsStakingStatusN2Staked QueryHeightAndValidatorsOptsStakingStatus = 2 // staked

)

// AAT defines model for AAT.
type AAT struct {
	Version   *string `json:"version,omitempty"`

	// Application hex public key
	AppPubKey *string `json:"app_pub_key,omitempty"`

	// Application hex public key associated with a client
	ClientPubKey *string `json:"client_pub_key,omitempty"`

	// Application's signature in hex
	Signature *string `json:"signature"`
}

// ABCIEvent defines model for ABCIEvent.
type ABCIEvent struct {
	Attributes *[]struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"attributes,omitempty"`
	Type *string `json:"type,omitempty"`
}

// ABCIMessageLog defines model for ABCIMessageLog.
type ABCIMessageLog struct {
	Events *[]ABCIEvent `json:"events,omitempty"`

	// Full text of the log
	Log *string `json:"log,omitempty"`

	// Ordered index of the log message
	MsgIndex *uint32 `json:"msg_index,omitempty"`

	// Success or failure?
	Success *bool `json:"success,omitempty"`
}

// Account defines model for Account.
type Account struct {
	Address   *string `json:"address,omitempty"`
	Coins     *[]Coin `json:"coins,omitempty"`
	PublicKey *string `json:"public_key,omitempty"`
}

// AllParams defines model for AllParams.
type AllParams struct {
	AppParams    *[]SingleParam `json:"app_params,omitempty"`
	AuthParams   *[]SingleParam `json:"auth_params,omitempty"`
	GovParams    *[]SingleParam `json:"gov_params,omitempty"`
	NodeParams   *[]SingleParam `json:"node_params,omitempty"`
	PocketParams *[]SingleParam `json:"pocket_params,omitempty"`
}

// Application defines model for Application.
type Application struct {
	// The hex address of the application
	Address *string `json:"address,omitempty"`

	// Blockchains supported
	Chains *[]string `json:"chains,omitempty"`

	// Has the application been jailed from staked status
	Jailed *bool `json:"jailed,omitempty"`

	// Maximum number of relays supported
	MaxRelays *int64 `json:"max_relays,omitempty"`

	// The hex public key of the application
	PublicKey *string `json:"public_key,omitempty"`

	// Application status
	Status *int `json:"status,omitempty"`

	// How many tokens has this node staked in uPOKT
	Tokens *string `json:"tokens,omitempty"`

	// If unstaking, the minimum time for the validator to complete unstaking
	UnstakingTime *string `json:"unstaking_time,omitempty"`
}

// ApplicationParams defines model for ApplicationParams.
type ApplicationParams struct {
	// minimum amount needed to stake as an application
	AppStakeMinimum *int64 `json:"app_stake_minimum,omitempty"`

	// base relays per POKT coin staked
	BaseRelaysPerPokt *int64 `json:"base_relays_per_pokt,omitempty"`

	// maximum number of applications
	MaxApplications *uint64 `json:"max_applications,omitempty"`

	// the participation rate affects the amount minted based on staked ratio
	ParticipationRateOn *bool `json:"participation_rate_on,omitempty"`

	// the stability adjustment from the governance
	StabilityAdjustment *int64 `json:"stability_adjustment,omitempty"`

	// duration of unstaking
	UnstakingTime *string `json:"unstaking_time,omitempty"`
}

// Applications defines model for Applications.
type Applications []Application

// Block defines model for Block.
type Block struct {
	// Data hash of the block
	Data *string `json:"data,omitempty"`

	// Evidence hash
	Evidence   *string      `json:"evidence,omitempty"`
	Header     *BlockHeader `json:"header,omitempty"`
	LastCommit *Commit      `json:"lastCommit,omitempty"`
}

// BlockHeader defines model for BlockHeader.
type BlockHeader struct {
	AppHash            *string    `json:"app_hash,omitempty"`
	ChainId            *string    `json:"chain_id,omitempty"`
	ConsensusHash      *string    `json:"consensus_hash,omitempty"`
	DataHash           *string    `json:"data_hash,omitempty"`
	EvidenceHash       *string    `json:"evidence_hash,omitempty"`
	Height             *int64     `json:"height,omitempty"`
	LastBlockId        *BlockID   `json:"last_block_id,omitempty"`
	LastCommitHash     *string    `json:"last_commit_hash,omitempty"`
	LastResultsHash    *string    `json:"last_results_hash,omitempty"`
	NextValidatorsHash *string    `json:"next_validators_hash,omitempty"`
	NumTxs             *int64     `json:"num_txs,omitempty"`
	ProposerAddress    *string    `json:"proposer_address,omitempty"`
	Time               *string    `json:"time,omitempty"`
	TotalTxs           *int64     `json:"total_txs,omitempty"`
	ValidatorsHash     *string    `json:"validators_hash,omitempty"`
	Version            *Consensus `json:"version,omitempty"`
}

// BlockID defines model for BlockID.
type BlockID struct {
	Hash  *string        `json:"hash,omitempty"`
	Parts *PartSetHeader `json:"parts,omitempty"`
}

// BlockMeta defines model for BlockMeta.
type BlockMeta struct {
	BlockHeader *BlockHeader `json:"blockHeader,omitempty"`
	BlockId     *BlockID     `json:"block_id,omitempty"`
}

// Blockchain defines model for Blockchain.
type Blockchain struct {
	// Name of the blockchain
	Name *string `json:"name,omitempty"`

	// Network identifier
	NetId *string `json:"net_id,omitempty"`
}

// Coin defines model for Coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Denom  *string `json:"denom,omitempty"`
}

// Commit defines model for Commit.
type Commit struct {
	BlockId         *BlockID         `json:"block_id,omitempty"`
	CommitSignature *CommitSignature `json:"commit_signature,omitempty"`
}

// CommitSignature defines model for CommitSignature.
type CommitSignature struct {
	BlockId          *BlockID `json:"block_id,omitempty"`
	Height           *int64   `json:"height,omitempty"`
	Round            *int     `json:"round,omitempty"`
	Signature        *string  `json:"signature,omitempty"`
	Timestamp        *string  `json:"timestamp,omitempty"`
	Type             *string  `json:"type,omitempty"`
	ValidatorAddress *string  `json:"validator_address,omitempty"`
	ValidatorIndex   *int32   `json:"validator_index,omitempty"`
}

// Consensus defines model for Consensus.
type Consensus struct {
	App   *int64 `json:"app,omitempty"`
	Block *int64 `json:"block,omitempty"`
}

// HashSum defines model for HashSum.
type HashSum struct {
	// byte array
	Hash *string `json:"hash,omitempty"`

	// uint64
	Sum *int `json:"sum,omitempty"`
}

// MsgClaim defines model for MsgClaim.
type MsgClaim struct {
	// Arbitrary Enum
	EvidenceType *int64 `json:"evidence_type,omitempty"`

	// height when the claim expires
	ExpirationHeight *int64         `json:"expiration_height,omitempty"`
	FromAddress      *string        `json:"from_address,omitempty"`
	MerkleRoot       *HashSum       `json:"merkle_root,omitempty"`
	SessionHeader    *SessionHeader `json:"session_header,omitempty"`
	TotalProofs      *int           `json:"total_proofs,omitempty"`
}

// Node defines model for Node.
type Node struct {
	// The hex address of the validator
	Address *string `json:"address,omitempty"`

	// Blockchains supported
	Chains *[]string `json:"chains,omitempty"`

	// Has the validator been jailed from staked status
	Jailed *bool `json:"jailed,omitempty"`

	// The validator public hex key
	PublicKey *string `json:"public_key,omitempty"`

	// The validator service url
	ServiceUrl *string `json:"service_url,omitempty"`

	// Validator status
	Status *int `json:"status,omitempty"`

	// How many tokens has this node staked in uPOKT
	Tokens *string `json:"tokens,omitempty"`

	// If unstaking, the minimum time for the validator to complete unstaking
	UnstakingTime *string `json:"unstaking_time,omitempty"`
}

// NodeParams defines model for NodeParams.
type NodeParams struct {
	// Award percentage of the mint for the DAO
	DaoAllocation *int64 `json:"dao_allocation,omitempty"`

	// Minimum amount of time node must spend in jail after missing blocks
	DowntimeJailDuration *int64 `json:"downtime_jail_duration,omitempty"`

	// Maximum age of tendermint evidence that is still valid (currently not implemented in Cosmos or Pocket-Core)
	MaxEvidenceAge *string `json:"max_evidence_age,omitempty"`

	// Maximum number of validators in the network at any given block
	MaxValidators *int64 `json:"max_validators,omitempty"`

	// Minimum number of blocks the node must sign per window
	MinSignedPerWindow *int64 `json:"min_signed_per_window,omitempty"`

	// Award percentage of the mint for the proposer
	ProposerAllocation *int32 `json:"proposer_allocation,omitempty"`

	// How many blocks are in a session
	SessionBlockFrequency *int64 `json:"session_block_frequency,omitempty"`

	// Window of time in blocks (unit) used for signature verification -> specifically in not signing (missing) blocks
	SignedBlocksWindow *int64 `json:"signed_blocks_window,omitempty"`

	// The factor of which a node is slashed for a double sign
	SlashFractionDoubleSign *int64 `json:"slash_fraction_double_sign,omitempty"`

	// The factor of which a node is slashed for a double sign
	SlashFractionDowntime *int64 `json:"slash_fraction_downtime,omitempty"`

	// The monetary denomination of the coins in the network `uPOKT`
	StakeDenom *string `json:"stake_denom,omitempty"`

	// Minimum amount of uPOKT needed to stake in the network as a node
	StakeMinimum *int64 `json:"stake_minimum,omitempty"`

	// How much time must pass between the begin_unstaking_tx and the node transitioning to unstaked status
	UnstakingTime *time.Time `json:"unstaking_time,omitempty"`
}

// PartSetHeader defines model for PartSetHeader.
type PartSetHeader struct {
	Hash  *string `json:"hash,omitempty"`
	Total *int64  `json:"total,omitempty"`
}

// PocketParams defines model for PocketParams.
type PocketParams struct {
	// Claim expiration
	ClaimExpiration *int64 `json:"claim_expiration,omitempty"`

	// Proof waiting period
	ProofWaitingPeriod *int64 `json:"proof_waiting_period,omitempty"`

	// Number of nodes in this session
	SessionNodeCount *int64 `json:"session_node_count,omitempty"`

	// Supported blockchains
	SupportedBlockchains *[]string `json:"supported_blockchains,omitempty"`
}

// QueryAccountTXs defines model for QueryAccountTXs.
type QueryAccountTXs struct {
	Address  string  `json:"address"`
	Order    *string `json:"order,omitempty"`
	Page     *int    `json:"page,omitempty"`
	PerPage  *int    `json:"per_page,omitempty"`
	Prove    *bool   `json:"prove,omitempty"`
	Received *bool   `json:"received,omitempty"`
}

// QueryAccountTXsResponse defines model for QueryAccountTXsResponse.
type QueryAccountTXsResponse struct {
	TotalCount *string        `json:"total_count,omitempty"`
	Txs        *[]Transaction `json:"txs,omitempty"`
}

// QueryAddressHeight defines model for QueryAddressHeight.
type QueryAddressHeight struct {
	Address *string `json:"address,omitempty"`
	Height  *int64  `json:"height,omitempty"`
}

// QueryAppsResponse defines model for QueryAppsResponse.
type QueryAppsResponse struct {
	// current page
	Page   *int64         `json:"page,omitempty"`
	Result *[]Application `json:"result,omitempty"`

	// maximum amount of pages
	TotalPages *int64 `json:"total_pages,omitempty"`
}

// QueryBalanceResponse defines model for QueryBalanceResponse.
type QueryBalanceResponse struct {
	Balance *int64 `json:"balance,omitempty"`
}

// QueryBlock defines model for QueryBlock.
type QueryBlock struct {
	Height *int64 `json:"height,omitempty"`
}

// QueryBlockResponse defines model for QueryBlockResponse.
type QueryBlockResponse struct {
	Block     *Block     `json:"block,omitempty"`
	BlockMeta *BlockMeta `json:"block_meta,omitempty"`
}

// QueryBlockTXs defines model for QueryBlockTXs.
type QueryBlockTXs struct {
	Height  int     `json:"height"`
	Order   *string `json:"order,omitempty"`
	Page    *int    `json:"page,omitempty"`
	PerPage *int    `json:"per_page,omitempty"`
	Prove   *bool   `json:"prove,omitempty"`
}

// QueryBlockTXsResponse defines model for QueryBlockTXsResponse.
type QueryBlockTXsResponse struct {
	TotalCount *int           `json:"total_count,omitempty"`
	Txs        *[]Transaction `json:"txs,omitempty"`
}

// QueryChallengeRequest defines model for QueryChallengeRequest.
type QueryChallengeRequest struct {
	// reporter address
	Address           *[]byte               `json:"address,omitempty"`
	MajorityResponses *[]QueryRelayResponse `json:"majority_responses,omitempty"`
	MinorityResponse  *QueryRelayResponse   `json:"minority_response,omitempty"`
}

// QueryChallengeResponse defines model for QueryChallengeResponse.
type QueryChallengeResponse struct {
	Response *string `json:"response,omitempty"`
}

// QueryDispatchRequest defines model for QueryDispatchRequest.
type QueryDispatchRequest SessionHeader

// QueryDispatchResponse defines model for QueryDispatchResponse.
type QueryDispatchResponse struct {
	BlockHeight *int64   `json:"block_height,omitempty"`
	Session     *Session `json:"session,omitempty"`
}

type Error struct {
	Code *int64 `json:"code,omitempty"`
	Codespace *string `json:"codespace,omitempty"`
	Message *string `json:"message,omitempty"`
}

// QueryErrorRelayResponse defines model for QueryErrorRelayResponse.
type QueryErrorRelayResponse struct {
	Dispatch *QueryDispatchResponse `json:"dispatch,omitempty"`

	// Amino JSON Error String
	Error *Error `json:"error,omitempty"`
}

// QueryHeight defines model for QueryHeight.
type QueryHeight struct {
	Height *int64 `json:"height,omitempty"`
}

// QueryHeightAndApplicationsOpts defines model for QueryHeightAndApplicationsOpts.
type QueryHeightAndApplicationsOpts struct {
	Blockchain    *string                                      `json:"blockchain,omitempty"`
	Height        *int64                                       `json:"height,omitempty"`
	Page          *int64                                       `json:"page,omitempty"`
	PerPage       *int64                                       `json:"per_page,omitempty"`
	StakingStatus *QueryHeightAndApplicationsOptsStakingStatus `json:"staking_status,omitempty"`
}

// QueryHeightAndApplicationsOptsStakingStatus defines model for QueryHeightAndApplicationsOpts.StakingStatus.
type QueryHeightAndApplicationsOptsStakingStatus int

// QueryHeightAndKey defines model for QueryHeightAndKey.
type QueryHeightAndKey struct {
	Height *int64  `json:"height,omitempty"`
	Key    *string `json:"key,omitempty"`
}

// QueryHeightAndValidatorsOpts defines model for QueryHeightAndValidatorsOpts.
type QueryHeightAndValidatorsOpts struct {
	Blockchain    *string                                    `json:"blockchain,omitempty"`
	Height        *int64                                     `json:"height,omitempty"`
	JailedStatus  *QueryHeightAndValidatorsOptsJailedStatus  `json:"jailed_status,omitempty"`
	Page          *int64                                     `json:"page,omitempty"`
	PerPage       *int64                                     `json:"per_page,omitempty"`
	StakingStatus *QueryHeightAndValidatorsOptsStakingStatus `json:"staking_status,omitempty"`
}

// QueryHeightAndValidatorsOptsJailedStatus defines model for QueryHeightAndValidatorsOpts.JailedStatus.
type QueryHeightAndValidatorsOptsJailedStatus int

// QueryHeightAndValidatorsOptsStakingStatus defines model for QueryHeightAndValidatorsOpts.StakingStatus.
type QueryHeightAndValidatorsOptsStakingStatus int

// QueryHeightResponse defines model for QueryHeightResponse.
type QueryHeightResponse struct {
	Height *int64 `json:"height,omitempty"`
}

// QueryNodeClaimsResponse defines model for QueryNodeClaimsResponse.
type QueryNodeClaimsResponse struct {
	// current page
	Page   *int64      `json:"page,omitempty"`
	Result *[]MsgClaim `json:"result,omitempty"`

	// maximum amount of pages
	TotalPages *int64 `json:"total_pages,omitempty"`
}

// QueryNodeReceipt defines model for QueryNodeReceipt.
type QueryNodeReceipt struct {
	// Node address
	Address *string `json:"address,omitempty"`

	// Application hex public key associated with a client
	AppPubkey  *string `json:"app_pubkey,omitempty"`
	Blockchain *string `json:"blockchain,omitempty"`

	// Height of the session
	Height *int64 `json:"height,omitempty"`

	// Session block height
	SessionBlockHeight *int64 `json:"session_block_height,omitempty"`
}

// QueryNodeReceiptsResponse defines model for QueryNodeReceiptsResponse.
type QueryNodeReceiptsResponse struct {
	// current page
	Page   *int64           `json:"page,omitempty"`
	Result *[]StoredReceipt `json:"result,omitempty"`

	// maximum amount of pages
	TotalPages *int64 `json:"total_pages,omitempty"`
}

// QueryNodesResponse defines model for QueryNodesResponse.
type QueryNodesResponse struct {
	// current page
	Page   *int64  `json:"page,omitempty"`
	Result *[]Node `json:"result,omitempty"`

	// maximum amount of pages
	TotalPages *int64 `json:"total_pages,omitempty"`
}

// QueryPaginatedHeightAndAddrParams defines model for QueryPaginatedHeightAndAddrParams.
type QueryPaginatedHeightAndAddrParams struct {
	Address *string `json:"address,omitempty"`
	Height  *int64  `json:"height,omitempty"`
	Page    *int64  `json:"page,omitempty"`
	PerPage *int64  `json:"per_page,omitempty"`
}

// QueryRawTXRequest defines model for QueryRawTXRequest.
type QueryRawTXRequest struct {
	Address     *string `json:"address,omitempty"`
	RawHexBytes *string `json:"raw_hex_bytes,omitempty"`
}

// QueryRawTXResponse defines model for QueryRawTXResponse.
type QueryRawTXResponse struct {
	Tx *map[string]interface{} `json:"Tx,omitempty"`

	// Result code returned (0 is OK; everything else is error)
	Code      *uint32 `json:"code,omitempty"`
	Codespace *string `json:"codespace,omitempty"`

	// Raw transaction data
	Data      *string `json:"data,omitempty"`
	GasUsed   *int64  `json:"gas_used,omitempty"`
	GasWanted *int64  `json:"gas_wanted,omitempty"`

	// Blockheight of the transaction
	Height *int64  `json:"height,omitempty"`
	Info   *string `json:"info,omitempty"`

	// ABCI Tendermint Logs
	Logs *[]ABCIMessageLog `json:"logs,omitempty"`

	// Raw transaction log
	RawLog *string `json:"raw_log,omitempty"`

	// Timestamp of the transaction
	Timestamp *string `json:"timestamp,omitempty"`

	// Hash of the transaction
	Txhash *string `json:"txhash,omitempty"`
}

// QueryRelayRequest defines model for QueryRelayRequest.
type QueryRelayRequest struct {
	// metadata for the relay request
	Meta *RelayMetadata `json:"meta,omitempty"`

	// the data payload of the request
	Payload *RelayPayload `json:"payload,omitempty"`
	Proof   *RelayProof   `json:"proof,omitempty"`
}

// QueryRelayResponse defines model for QueryRelayResponse.
type QueryRelayResponse struct {
	// string response to relay
	Payload *string `json:"payload,omitempty"`

	// Signature from the node in hex
	Signature *string `json:"signature,omitempty"`
}

// QuerySigningInfoResponse defines model for QuerySigningInfoResponse.
type QuerySigningInfoResponse struct {
	// current page
	Page   *int64         `json:"page,omitempty"`
	Result *[]SigningInfo `json:"result,omitempty"`

	// maximum amount of pages
	TotalPages *int64 `json:"total_pages,omitempty"`
}

// QuerySimRequest defines model for QuerySimRequest.
type QuerySimRequest struct {
	// metadata for the relay request
	Meta *RelayMetadata `json:"meta,omitempty"`

	// the data payload of the request
	Payload        *RelayPayload `json:"payload,omitempty"`
	Proof          *RelayProof   `json:"proof,omitempty"`
	RelayNetworkId *string       `json:"relay_network_id,omitempty"`
}

// QuerySupplyResponse defines model for QuerySupplyResponse.
type QuerySupplyResponse struct {
	// Amount staked by the app in uPOKT
	AppStaked *int64 `json:"app_staked,omitempty"`

	// DAO amount in uPOKT
	Dao *int64 `json:"dao,omitempty"`

	// Amount staked by the node in uPOKT
	NodeStaked *int64 `json:"node_staked,omitempty"`

	// Total amount in uPOKT
	Total *int64 `json:"total,omitempty"`

	// Total amount staked in uPOKT
	TotalStaked *int64 `json:"total_staked,omitempty"`

	// Total amount unstaked in uPOKT
	TotalUnstaked *int64 `json:"total_unstaked,omitempty"`
}

// QuerySupportedChainsResponse defines model for QuerySupportedChainsResponse.
type QuerySupportedChainsResponse struct {
	// Supported blockchains
	SupportedChains *[]string `json:"supported_chains,omitempty"`
}

// QueryTX defines model for QueryTX.
type QueryTX struct {
	Hash  *string `json:"hash,omitempty"`
	Prove *bool   `json:"prove,omitempty"`
}

// QueryTXResponse defines model for QueryTXResponse.
type QueryTXResponse struct {
	Transaction *Transaction `json:"transaction,omitempty"`
}

// RelayHeader defines model for RelayHeader.
type RelayHeader struct {
	AdditionalProperties map[string]string `json:"-"`
}

// metadata for the relay request
type RelayMetadata struct {
	BlockHeight *int64 `json:"block_height,omitempty"`
}

// the data payload of the request
type RelayPayload struct {
	// The actual data of the request string for the external chain
	Data    *string      `json:"data,omitempty"`

	// The HTTP CRUD method
	Method *string `json:"method,omitempty"`

	// The REST path
	Path *string `json:"path,omitempty"`

	Headers *RelayHeader `json:"headers,omitempty"`
}

// RelayProof defines model for RelayProof.
type RelayProof struct {
	Aat *AAT `json:"aat,omitempty"`

	// Blockchain hex string
	Blockchain *string `json:"blockchain,omitempty"`

	// Entropy value to add uniqueness
	Entropy *int64 `json:"entropy,omitempty"`

	// request hash identifier
	RequestHash *string `json:"request_hash,omitempty"`

	// Servicer public hex public key
	ServicerPubKey *string `json:"servicer_pub_key,omitempty"`

	// Height of the session
	SessionBlockHeight *int64 `json:"session_block_height,omitempty"`

	// client's signature in hex
	Signature *string `json:"signature,omitempty"`
}

// Session defines model for Session.
type Session struct {
	Header *SessionHeader `json:"header,omitempty"`
	Key    *[]byte        `json:"key,omitempty"`
	Nodes  *[]Node        `json:"nodes,omitempty"`
}

// SessionHeader defines model for SessionHeader.
type SessionHeader struct {
	// Application hex public key associated with a client
	AppPublicKey *string `json:"app_public_key,omitempty"`

	// Network Identified in hex
	Chain *string `json:"chain,omitempty"`

	// Height of the session
	SessionHeight *int64 `json:"session_height,omitempty"`
}

// SigningInfo defines model for SigningInfo.
type SigningInfo struct {
	// operator address of the signing info
	Address *string `json:"address,omitempty"`

	// The counter for the signing info (reset to 0 after SignedBlocksWindow elapses)
	IndexOffset *int64 `json:"index_offset,omitempty"`

	// The number of blocks jailed (reset to 0 after unjail)
	JailedBlocksCounter *int64 `json:"jailed_blocks_counter,omitempty"`

	// The time the node can be unjailed
	JailedUntil *string `json:"jailed_until,omitempty"`

	// The number of blocks missed within SignedBlocksWindow (can be decremented after the fact if new signature information/evidence is found)
	MissedBlocksCounter *int64 `json:"missed_blocks_counter,omitempty"`

	// The origin height of the node (when it first joined the network)
	StartHeight *int64 `json:"start_height,omitempty"`
}

// SimpleProof defines model for SimpleProof.
type SimpleProof struct {
	Aunts    *[]string `json:"aunts,omitempty"`
	Index    *int64    `json:"index,omitempty"`
	LeafHash *string   `json:"leaf_hash,omitempty"`
	Total    *int64    `json:"total,omitempty"`
}

// SingleParam defines model for SingleParam.
type SingleParam struct {
	ParamKey   *string `json:"param_key,omitempty"`
	ParamValue *string `json:"param_value,omitempty"`
}

// StdTx defines model for StdTx.
type StdTx struct {
	Entropy   *int                    `json:"entropy,omitempty"`
	Fee       *Coin                   `json:"fee,omitempty"`
	Memo      *string                 `json:"memo,omitempty"`
	Msg       *map[string]interface{} `json:"msg,omitempty"`
	Signature *struct {
		PubKey    *string `json:"pub_key,omitempty"`
		Signature *string `json:"signature,omitempty"`
	} `json:"signature,omitempty"`
}

// StoredReceipt defines model for StoredReceipt.
type StoredReceipt struct {
	EvidenceType    *int64         `json:"evidence_type,omitempty"`
	ServicerAddress *string        `json:"servicer_address,omitempty"`
	SessionHeader   *SessionHeader `json:"session_header,omitempty"`
	TotalRelays     *int64         `json:"total_relays,omitempty"`
}

// Proof of the transaction
type TXProof struct {
	Data     *string      `json:"data,omitempty"`
	Proof    *SimpleProof `json:"proof,omitempty"`
	RootHash *string      `json:"root_hash,omitempty"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	// Hash of the transaction
	Hash *string `json:"hash,omitempty"`

	// Blockheight of the transaction
	Height *int64 `json:"height,omitempty"`
	Index  *int64 `json:"index,omitempty"`

	// Proof of the transaction
	Proof *TXProof `json:"proof,omitempty"`
	StdTx *StdTx   `json:"stdTx,omitempty"`

	// Raw data of the transaction
	Tx       *string   `json:"tx,omitempty"`
	TxResult *TxResult `json:"tx_result,omitempty"`
}

// TxResult defines model for TxResult.
type TxResult struct {
	Code      *int32    `json:"code,omitempty"`
	Codespace *string   `json:"codespace,omitempty"`
	Data      *string   `json:"data,omitempty"`
	Events    *[]string `json:"events,omitempty"`
	Info      *string   `json:"info,omitempty"`
	Log       *string   `json:"log,omitempty"`

	// The type of the transaction, can be "app_stake", "app_begin_unstake", "stake_validator", "begin_unstake_validator", "unjail_validator", "send", "upgrade", "change_param", "dao_tranfer", "claim", or "proof"
	MessageType *string `json:"message_type,omitempty"`

	// The receiver of the transaction, will be null if no receiver
	Recipient *string `json:"recipient,omitempty"`
	Signer    *string `json:"signer,omitempty"`
}

// UpgradeResponse defines model for UpgradeResponse.
type UpgradeResponse struct {
	Height  *string `json:"Height,omitempty"`
	Version *string `json:"Version,omitempty"`
}

// PostClientChallengeJSONBody defines parameters for PostClientChallenge.
type PostClientChallengeJSONBody QueryChallengeRequest

// PostClientDispatchJSONBody defines parameters for PostClientDispatch.
type PostClientDispatchJSONBody QueryDispatchRequest

// PostClientRawtxJSONBody defines parameters for PostClientRawtx.
type PostClientRawtxJSONBody QueryRawTXRequest

// PostClientRelayJSONBody defines parameters for PostClientRelay.
type PostClientRelayJSONBody QueryRelayRequest

// PostClientSimJSONBody defines parameters for PostClientSim.
type PostClientSimJSONBody QuerySimRequest

// PostPrivateStopParams defines parameters for PostPrivateStop.
type PostPrivateStopParams struct {
	// Current Authorization Token from pocket core.
	Authtoken *string `json:"authtoken,omitempty"`
}

// PostQueryAccountJSONBody defines parameters for PostQueryAccount.
type PostQueryAccountJSONBody QueryAddressHeight

// PostQueryAccounttxsJSONBody defines parameters for PostQueryAccounttxs.
type PostQueryAccounttxsJSONBody QueryAccountTXs

// PostQueryAllParamsJSONBody defines parameters for PostQueryAllParams.
type PostQueryAllParamsJSONBody QueryHeight

// PostQueryAppJSONBody defines parameters for PostQueryApp.
type PostQueryAppJSONBody QueryAddressHeight

// PostQueryAppparamsJSONBody defines parameters for PostQueryAppparams.
type PostQueryAppparamsJSONBody QueryHeight

// PostQueryAppsJSONBody defines parameters for PostQueryApps.
type PostQueryAppsJSONBody QueryHeightAndApplicationsOpts

// PostQueryBalanceJSONBody defines parameters for PostQueryBalance.
type PostQueryBalanceJSONBody QueryAddressHeight

// PostQueryBlockJSONBody defines parameters for PostQueryBlock.
type PostQueryBlockJSONBody QueryBlock

// PostQueryBlocktxsJSONBody defines parameters for PostQueryBlocktxs.
type PostQueryBlocktxsJSONBody QueryBlockTXs

// PostQueryHeightJSONBody defines parameters for PostQueryHeight.
type PostQueryHeightJSONBody interface{}

// PostQueryNodeJSONBody defines parameters for PostQueryNode.
type PostQueryNodeJSONBody QueryAddressHeight

// PostQueryNodeclaimJSONBody defines parameters for PostQueryNodeclaim.
type PostQueryNodeclaimJSONBody QueryNodeReceipt

// PostQueryNodeclaimsJSONBody defines parameters for PostQueryNodeclaims.
type PostQueryNodeclaimsJSONBody QueryPaginatedHeightAndAddrParams

// PostQueryNodeparamsJSONBody defines parameters for PostQueryNodeparams.
type PostQueryNodeparamsJSONBody QueryHeight

// PostQueryNodesJSONBody defines parameters for PostQueryNodes.
type PostQueryNodesJSONBody QueryHeightAndValidatorsOpts

// PostQueryParamJSONBody defines parameters for PostQueryParam.
type PostQueryParamJSONBody QueryHeightAndKey

// PostQueryPocketparamsJSONBody defines parameters for PostQueryPocketparams.
type PostQueryPocketparamsJSONBody QueryHeight

// PostQuerySigninginfoJSONBody defines parameters for PostQuerySigninginfo.
type PostQuerySigninginfoJSONBody QueryPaginatedHeightAndAddrParams

// PostQueryStateJSONBody defines parameters for PostQueryState.
type PostQueryStateJSONBody QueryHeight

// PostQuerySupplyJSONBody defines parameters for PostQuerySupply.
type PostQuerySupplyJSONBody QueryHeight

// PostQuerySupportedchainsJSONBody defines parameters for PostQuerySupportedchains.
type PostQuerySupportedchainsJSONBody QueryHeight

// PostQueryTxJSONBody defines parameters for PostQueryTx.
type PostQueryTxJSONBody QueryTX

// PostQueryUpgradeJSONBody defines parameters for PostQueryUpgrade.
type PostQueryUpgradeJSONBody QueryHeight

// PostClientChallengeJSONRequestBody defines body for PostClientChallenge for application/json ContentType.
type PostClientChallengeJSONRequestBody PostClientChallengeJSONBody

// PostClientDispatchJSONRequestBody defines body for PostClientDispatch for application/json ContentType.
type PostClientDispatchJSONRequestBody PostClientDispatchJSONBody

// PostClientRawtxJSONRequestBody defines body for PostClientRawtx for application/json ContentType.
type PostClientRawtxJSONRequestBody PostClientRawtxJSONBody

// PostClientRelayJSONRequestBody defines body for PostClientRelay for application/json ContentType.
type PostClientRelayJSONRequestBody PostClientRelayJSONBody

// PostClientSimJSONRequestBody defines body for PostClientSim for application/json ContentType.
type PostClientSimJSONRequestBody PostClientSimJSONBody

// PostQueryAccountJSONRequestBody defines body for PostQueryAccount for application/json ContentType.
type PostQueryAccountJSONRequestBody PostQueryAccountJSONBody

// PostQueryAccounttxsJSONRequestBody defines body for PostQueryAccounttxs for application/json ContentType.
type PostQueryAccounttxsJSONRequestBody PostQueryAccounttxsJSONBody

// PostQueryAllParamsJSONRequestBody defines body for PostQueryAllParams for application/json ContentType.
type PostQueryAllParamsJSONRequestBody PostQueryAllParamsJSONBody

// PostQueryAppJSONRequestBody defines body for PostQueryApp for application/json ContentType.
type PostQueryAppJSONRequestBody PostQueryAppJSONBody

// PostQueryAppparamsJSONRequestBody defines body for PostQueryAppparams for application/json ContentType.
type PostQueryAppparamsJSONRequestBody PostQueryAppparamsJSONBody

// PostQueryAppsJSONRequestBody defines body for PostQueryApps for application/json ContentType.
type PostQueryAppsJSONRequestBody PostQueryAppsJSONBody

// PostQueryBalanceJSONRequestBody defines body for PostQueryBalance for application/json ContentType.
type PostQueryBalanceJSONRequestBody PostQueryBalanceJSONBody

// PostQueryBlockJSONRequestBody defines body for PostQueryBlock for application/json ContentType.
type PostQueryBlockJSONRequestBody PostQueryBlockJSONBody

// PostQueryBlocktxsJSONRequestBody defines body for PostQueryBlocktxs for application/json ContentType.
type PostQueryBlocktxsJSONRequestBody PostQueryBlocktxsJSONBody

// PostQueryHeightJSONRequestBody defines body for PostQueryHeight for application/json ContentType.
type PostQueryHeightJSONRequestBody PostQueryHeightJSONBody

// PostQueryNodeJSONRequestBody defines body for PostQueryNode for application/json ContentType.
type PostQueryNodeJSONRequestBody PostQueryNodeJSONBody

// PostQueryNodeclaimJSONRequestBody defines body for PostQueryNodeclaim for application/json ContentType.
type PostQueryNodeclaimJSONRequestBody PostQueryNodeclaimJSONBody

// PostQueryNodeclaimsJSONRequestBody defines body for PostQueryNodeclaims for application/json ContentType.
type PostQueryNodeclaimsJSONRequestBody PostQueryNodeclaimsJSONBody

// PostQueryNodeparamsJSONRequestBody defines body for PostQueryNodeparams for application/json ContentType.
type PostQueryNodeparamsJSONRequestBody PostQueryNodeparamsJSONBody

// PostQueryNodesJSONRequestBody defines body for PostQueryNodes for application/json ContentType.
type PostQueryNodesJSONRequestBody PostQueryNodesJSONBody

// PostQueryParamJSONRequestBody defines body for PostQueryParam for application/json ContentType.
type PostQueryParamJSONRequestBody PostQueryParamJSONBody

// PostQueryPocketparamsJSONRequestBody defines body for PostQueryPocketparams for application/json ContentType.
type PostQueryPocketparamsJSONRequestBody PostQueryPocketparamsJSONBody

// PostQuerySigninginfoJSONRequestBody defines body for PostQuerySigninginfo for application/json ContentType.
type PostQuerySigninginfoJSONRequestBody PostQuerySigninginfoJSONBody

// PostQueryStateJSONRequestBody defines body for PostQueryState for application/json ContentType.
type PostQueryStateJSONRequestBody PostQueryStateJSONBody

// PostQuerySupplyJSONRequestBody defines body for PostQuerySupply for application/json ContentType.
type PostQuerySupplyJSONRequestBody PostQuerySupplyJSONBody

// PostQuerySupportedchainsJSONRequestBody defines body for PostQuerySupportedchains for application/json ContentType.
type PostQuerySupportedchainsJSONRequestBody PostQuerySupportedchainsJSONBody

// PostQueryTxJSONRequestBody defines body for PostQueryTx for application/json ContentType.
type PostQueryTxJSONRequestBody PostQueryTxJSONBody

// PostQueryUpgradeJSONRequestBody defines body for PostQueryUpgrade for application/json ContentType.
type PostQueryUpgradeJSONRequestBody PostQueryUpgradeJSONBody

// Getter for additional properties for RelayHeader. Returns the specified
// element and whether it was found
func (a RelayHeader) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RelayHeader
func (a *RelayHeader) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RelayHeader to handle AdditionalProperties
func (a *RelayHeader) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RelayHeader to handle AdditionalProperties
func (a RelayHeader) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientChallenge request with any body
	PostClientChallengeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientChallenge(ctx context.Context, body PostClientChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientDispatch request with any body
	PostClientDispatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientDispatch(ctx context.Context, body PostClientDispatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientRawtx request with any body
	PostClientRawtxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientRawtx(ctx context.Context, body PostClientRawtxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientRelay request with any body
	PostClientRelayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientRelay(ctx context.Context, body PostClientRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientSim request with any body
	PostClientSimWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientSim(ctx context.Context, body PostClientSimJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPrivateStop request
	PostPrivateStop(ctx context.Context, params *PostPrivateStopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryAccount request with any body
	PostQueryAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryAccount(ctx context.Context, body PostQueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryAccounttxs request with any body
	PostQueryAccounttxsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryAccounttxs(ctx context.Context, body PostQueryAccounttxsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryAllParams request with any body
	PostQueryAllParamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryAllParams(ctx context.Context, body PostQueryAllParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryApp request with any body
	PostQueryAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryApp(ctx context.Context, body PostQueryAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryAppparams request with any body
	PostQueryAppparamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryAppparams(ctx context.Context, body PostQueryAppparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryApps request with any body
	PostQueryAppsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryApps(ctx context.Context, body PostQueryAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryBalance request with any body
	PostQueryBalanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryBalance(ctx context.Context, body PostQueryBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryBlock request with any body
	PostQueryBlockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryBlock(ctx context.Context, body PostQueryBlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryBlocktxs request with any body
	PostQueryBlocktxsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryBlocktxs(ctx context.Context, body PostQueryBlocktxsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryHeight request with any body
	PostQueryHeightWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryHeight(ctx context.Context, body PostQueryHeightJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryNode request with any body
	PostQueryNodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryNode(ctx context.Context, body PostQueryNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryNodeclaim request with any body
	PostQueryNodeclaimWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryNodeclaim(ctx context.Context, body PostQueryNodeclaimJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryNodeclaims request with any body
	PostQueryNodeclaimsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryNodeclaims(ctx context.Context, body PostQueryNodeclaimsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryNodeparams request with any body
	PostQueryNodeparamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryNodeparams(ctx context.Context, body PostQueryNodeparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryNodes request with any body
	PostQueryNodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryNodes(ctx context.Context, body PostQueryNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryParam request with any body
	PostQueryParamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryParam(ctx context.Context, body PostQueryParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryPocketparams request with any body
	PostQueryPocketparamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryPocketparams(ctx context.Context, body PostQueryPocketparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQuerySigninginfo request with any body
	PostQuerySigninginfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQuerySigninginfo(ctx context.Context, body PostQuerySigninginfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryState request with any body
	PostQueryStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryState(ctx context.Context, body PostQueryStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQuerySupply request with any body
	PostQuerySupplyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQuerySupply(ctx context.Context, body PostQuerySupplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQuerySupportedchains request with any body
	PostQuerySupportedchainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQuerySupportedchains(ctx context.Context, body PostQuerySupportedchainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryTx request with any body
	PostQueryTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryTx(ctx context.Context, body PostQueryTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueryUpgrade request with any body
	PostQueryUpgradeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueryUpgrade(ctx context.Context, body PostQueryUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientChallengeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientChallengeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientChallenge(ctx context.Context, body PostClientChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientChallengeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientDispatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientDispatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientDispatch(ctx context.Context, body PostClientDispatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientDispatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientRawtxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientRawtxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientRawtx(ctx context.Context, body PostClientRawtxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientRawtxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientRelayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientRelayRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientRelay(ctx context.Context, body PostClientRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientRelayRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientSimWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientSimRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientSim(ctx context.Context, body PostClientSimJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientSimRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPrivateStop(ctx context.Context, params *PostPrivateStopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPrivateStopRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryAccount(ctx context.Context, body PostQueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryAccounttxsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAccounttxsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryAccounttxs(ctx context.Context, body PostQueryAccounttxsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAccounttxsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryAllParamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAllParamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryAllParams(ctx context.Context, body PostQueryAllParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAllParamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAppRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryApp(ctx context.Context, body PostQueryAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAppRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryAppparamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAppparamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryAppparams(ctx context.Context, body PostQueryAppparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAppparamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryAppsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAppsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryApps(ctx context.Context, body PostQueryAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryAppsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryBalanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryBalanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryBalance(ctx context.Context, body PostQueryBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryBalanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryBlockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryBlockRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryBlock(ctx context.Context, body PostQueryBlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryBlockRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryBlocktxsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryBlocktxsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryBlocktxs(ctx context.Context, body PostQueryBlocktxsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryBlocktxsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryHeightWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryHeightRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryHeight(ctx context.Context, body PostQueryHeightJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryHeightRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryNodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryNodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryNode(ctx context.Context, body PostQueryNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryNodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryNodeclaimWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryNodeclaimRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryNodeclaim(ctx context.Context, body PostQueryNodeclaimJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryNodeclaimRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryNodeclaimsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryNodeclaimsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryNodeclaims(ctx context.Context, body PostQueryNodeclaimsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryNodeclaimsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryNodeparamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryNodeparamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryNodeparams(ctx context.Context, body PostQueryNodeparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryNodeparamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryNodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryNodesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryNodes(ctx context.Context, body PostQueryNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryNodesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryParamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryParamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryParam(ctx context.Context, body PostQueryParamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryParamRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryPocketparamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryPocketparamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryPocketparams(ctx context.Context, body PostQueryPocketparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryPocketparamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQuerySigninginfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQuerySigninginfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQuerySigninginfo(ctx context.Context, body PostQuerySigninginfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQuerySigninginfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryStateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryState(ctx context.Context, body PostQueryStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryStateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQuerySupplyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQuerySupplyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQuerySupply(ctx context.Context, body PostQuerySupplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQuerySupplyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQuerySupportedchainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQuerySupportedchainsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQuerySupportedchains(ctx context.Context, body PostQuerySupportedchainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQuerySupportedchainsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryTxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryTx(ctx context.Context, body PostQueryTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryTxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryUpgradeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryUpgradeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueryUpgrade(ctx context.Context, body PostQueryUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueryUpgradeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientChallengeRequest calls the generic PostClientChallenge builder with application/json body
func NewPostClientChallengeRequest(server string, body PostClientChallengeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientChallengeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostClientChallengeRequestWithBody generates requests for PostClientChallenge with any type of body
func NewPostClientChallengeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/challenge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostClientDispatchRequest calls the generic PostClientDispatch builder with application/json body
func NewPostClientDispatchRequest(server string, body PostClientDispatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientDispatchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostClientDispatchRequestWithBody generates requests for PostClientDispatch with any type of body
func NewPostClientDispatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/dispatch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostClientRawtxRequest calls the generic PostClientRawtx builder with application/json body
func NewPostClientRawtxRequest(server string, body PostClientRawtxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientRawtxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostClientRawtxRequestWithBody generates requests for PostClientRawtx with any type of body
func NewPostClientRawtxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/rawtx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostClientRelayRequest calls the generic PostClientRelay builder with application/json body
func NewPostClientRelayRequest(server string, body PostClientRelayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientRelayRequestWithBody(server, "application/json", bodyReader)
}

// NewPostClientRelayRequestWithBody generates requests for PostClientRelay with any type of body
func NewPostClientRelayRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/relay")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostClientSimRequest calls the generic PostClientSim builder with application/json body
func NewPostClientSimRequest(server string, body PostClientSimJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientSimRequestWithBody(server, "application/json", bodyReader)
}

// NewPostClientSimRequestWithBody generates requests for PostClientSim with any type of body
func NewPostClientSimRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/sim")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPrivateStopRequest generates requests for PostPrivateStop
func NewPostPrivateStopRequest(server string, params *PostPrivateStopParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Authtoken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authtoken", runtime.ParamLocationQuery, *params.Authtoken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostQueryAccountRequest calls the generic PostQueryAccount builder with application/json body
func NewPostQueryAccountRequest(server string, body PostQueryAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryAccountRequestWithBody generates requests for PostQueryAccount with any type of body
func NewPostQueryAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryAccounttxsRequest calls the generic PostQueryAccounttxs builder with application/json body
func NewPostQueryAccounttxsRequest(server string, body PostQueryAccounttxsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryAccounttxsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryAccounttxsRequestWithBody generates requests for PostQueryAccounttxs with any type of body
func NewPostQueryAccounttxsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/accounttxs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryAllParamsRequest calls the generic PostQueryAllParams builder with application/json body
func NewPostQueryAllParamsRequest(server string, body PostQueryAllParamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryAllParamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryAllParamsRequestWithBody generates requests for PostQueryAllParams with any type of body
func NewPostQueryAllParamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/allParams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryAppRequest calls the generic PostQueryApp builder with application/json body
func NewPostQueryAppRequest(server string, body PostQueryAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryAppRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryAppRequestWithBody generates requests for PostQueryApp with any type of body
func NewPostQueryAppRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/app")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryAppparamsRequest calls the generic PostQueryAppparams builder with application/json body
func NewPostQueryAppparamsRequest(server string, body PostQueryAppparamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryAppparamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryAppparamsRequestWithBody generates requests for PostQueryAppparams with any type of body
func NewPostQueryAppparamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/appparams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryAppsRequest calls the generic PostQueryApps builder with application/json body
func NewPostQueryAppsRequest(server string, body PostQueryAppsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryAppsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryAppsRequestWithBody generates requests for PostQueryApps with any type of body
func NewPostQueryAppsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryBalanceRequest calls the generic PostQueryBalance builder with application/json body
func NewPostQueryBalanceRequest(server string, body PostQueryBalanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryBalanceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryBalanceRequestWithBody generates requests for PostQueryBalance with any type of body
func NewPostQueryBalanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryBlockRequest calls the generic PostQueryBlock builder with application/json body
func NewPostQueryBlockRequest(server string, body PostQueryBlockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryBlockRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryBlockRequestWithBody generates requests for PostQueryBlock with any type of body
func NewPostQueryBlockRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/block")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryBlocktxsRequest calls the generic PostQueryBlocktxs builder with application/json body
func NewPostQueryBlocktxsRequest(server string, body PostQueryBlocktxsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryBlocktxsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryBlocktxsRequestWithBody generates requests for PostQueryBlocktxs with any type of body
func NewPostQueryBlocktxsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/blocktxs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryHeightRequest calls the generic PostQueryHeight builder with application/json body
func NewPostQueryHeightRequest(server string, body PostQueryHeightJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryHeightRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryHeightRequestWithBody generates requests for PostQueryHeight with any type of body
func NewPostQueryHeightRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/height")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryNodeRequest calls the generic PostQueryNode builder with application/json body
func NewPostQueryNodeRequest(server string, body PostQueryNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryNodeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryNodeRequestWithBody generates requests for PostQueryNode with any type of body
func NewPostQueryNodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/node")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryNodeclaimRequest calls the generic PostQueryNodeclaim builder with application/json body
func NewPostQueryNodeclaimRequest(server string, body PostQueryNodeclaimJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryNodeclaimRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryNodeclaimRequestWithBody generates requests for PostQueryNodeclaim with any type of body
func NewPostQueryNodeclaimRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/nodeclaim")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryNodeclaimsRequest calls the generic PostQueryNodeclaims builder with application/json body
func NewPostQueryNodeclaimsRequest(server string, body PostQueryNodeclaimsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryNodeclaimsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryNodeclaimsRequestWithBody generates requests for PostQueryNodeclaims with any type of body
func NewPostQueryNodeclaimsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/nodeclaims")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryNodeparamsRequest calls the generic PostQueryNodeparams builder with application/json body
func NewPostQueryNodeparamsRequest(server string, body PostQueryNodeparamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryNodeparamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryNodeparamsRequestWithBody generates requests for PostQueryNodeparams with any type of body
func NewPostQueryNodeparamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/nodeparams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryNodesRequest calls the generic PostQueryNodes builder with application/json body
func NewPostQueryNodesRequest(server string, body PostQueryNodesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryNodesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryNodesRequestWithBody generates requests for PostQueryNodes with any type of body
func NewPostQueryNodesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryParamRequest calls the generic PostQueryParam builder with application/json body
func NewPostQueryParamRequest(server string, body PostQueryParamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryParamRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryParamRequestWithBody generates requests for PostQueryParam with any type of body
func NewPostQueryParamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/param")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryPocketparamsRequest calls the generic PostQueryPocketparams builder with application/json body
func NewPostQueryPocketparamsRequest(server string, body PostQueryPocketparamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryPocketparamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryPocketparamsRequestWithBody generates requests for PostQueryPocketparams with any type of body
func NewPostQueryPocketparamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/pocketparams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQuerySigninginfoRequest calls the generic PostQuerySigninginfo builder with application/json body
func NewPostQuerySigninginfoRequest(server string, body PostQuerySigninginfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQuerySigninginfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQuerySigninginfoRequestWithBody generates requests for PostQuerySigninginfo with any type of body
func NewPostQuerySigninginfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/signinginfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryStateRequest calls the generic PostQueryState builder with application/json body
func NewPostQueryStateRequest(server string, body PostQueryStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryStateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryStateRequestWithBody generates requests for PostQueryState with any type of body
func NewPostQueryStateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQuerySupplyRequest calls the generic PostQuerySupply builder with application/json body
func NewPostQuerySupplyRequest(server string, body PostQuerySupplyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQuerySupplyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQuerySupplyRequestWithBody generates requests for PostQuerySupply with any type of body
func NewPostQuerySupplyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/supply")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQuerySupportedchainsRequest calls the generic PostQuerySupportedchains builder with application/json body
func NewPostQuerySupportedchainsRequest(server string, body PostQuerySupportedchainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQuerySupportedchainsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQuerySupportedchainsRequestWithBody generates requests for PostQuerySupportedchains with any type of body
func NewPostQuerySupportedchainsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/supportedchains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryTxRequest calls the generic PostQueryTx builder with application/json body
func NewPostQueryTxRequest(server string, body PostQueryTxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryTxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryTxRequestWithBody generates requests for PostQueryTx with any type of body
func NewPostQueryTxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostQueryUpgradeRequest calls the generic PostQueryUpgrade builder with application/json body
func NewPostQueryUpgradeRequest(server string, body PostQueryUpgradeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueryUpgradeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueryUpgradeRequestWithBody generates requests for PostQueryUpgrade with any type of body
func NewPostQueryUpgradeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query/upgrade")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Get request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// PostClientChallenge request with any body
	PostClientChallengeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientChallengeResponse, error)

	PostClientChallengeWithResponse(ctx context.Context, body PostClientChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientChallengeResponse, error)

	// PostClientDispatch request with any body
	PostClientDispatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientDispatchResponse, error)

	PostClientDispatchWithResponse(ctx context.Context, body PostClientDispatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientDispatchResponse, error)

	// PostClientRawtx request with any body
	PostClientRawtxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientRawtxResponse, error)

	PostClientRawtxWithResponse(ctx context.Context, body PostClientRawtxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientRawtxResponse, error)

	// PostClientRelay request with any body
	PostClientRelayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientRelayResponse, error)

	PostClientRelayWithResponse(ctx context.Context, body PostClientRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientRelayResponse, error)

	// PostClientSim request with any body
	PostClientSimWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientSimResponse, error)

	PostClientSimWithResponse(ctx context.Context, body PostClientSimJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientSimResponse, error)

	// PostPrivateStop request
	PostPrivateStopWithResponse(ctx context.Context, params *PostPrivateStopParams, reqEditors ...RequestEditorFn) (*PostPrivateStopResponse, error)

	// PostQueryAccount request with any body
	PostQueryAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAccountResponse, error)

	PostQueryAccountWithResponse(ctx context.Context, body PostQueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAccountResponse, error)

	// PostQueryAccounttxs request with any body
	PostQueryAccounttxsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAccounttxsResponse, error)

	PostQueryAccounttxsWithResponse(ctx context.Context, body PostQueryAccounttxsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAccounttxsResponse, error)

	// PostQueryAllParams request with any body
	PostQueryAllParamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAllParamsResponse, error)

	PostQueryAllParamsWithResponse(ctx context.Context, body PostQueryAllParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAllParamsResponse, error)

	// PostQueryApp request with any body
	PostQueryAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAppResponse, error)

	PostQueryAppWithResponse(ctx context.Context, body PostQueryAppJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAppResponse, error)

	// PostQueryAppparams request with any body
	PostQueryAppparamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAppparamsResponse, error)

	PostQueryAppparamsWithResponse(ctx context.Context, body PostQueryAppparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAppparamsResponse, error)

	// PostQueryApps request with any body
	PostQueryAppsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAppsResponse, error)

	PostQueryAppsWithResponse(ctx context.Context, body PostQueryAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAppsResponse, error)

	// PostQueryBalance request with any body
	PostQueryBalanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryBalanceResponse, error)

	PostQueryBalanceWithResponse(ctx context.Context, body PostQueryBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryBalanceResponse, error)

	// PostQueryBlock request with any body
	PostQueryBlockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryBlockResponse, error)

	PostQueryBlockWithResponse(ctx context.Context, body PostQueryBlockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryBlockResponse, error)

	// PostQueryBlocktxs request with any body
	PostQueryBlocktxsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryBlocktxsResponse, error)

	PostQueryBlocktxsWithResponse(ctx context.Context, body PostQueryBlocktxsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryBlocktxsResponse, error)

	// PostQueryHeight request with any body
	PostQueryHeightWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryHeightResponse, error)

	PostQueryHeightWithResponse(ctx context.Context, body PostQueryHeightJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryHeightResponse, error)

	// PostQueryNode request with any body
	PostQueryNodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryNodeResponse, error)

	PostQueryNodeWithResponse(ctx context.Context, body PostQueryNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryNodeResponse, error)

	// PostQueryNodeclaim request with any body
	PostQueryNodeclaimWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryNodeclaimResponse, error)

	PostQueryNodeclaimWithResponse(ctx context.Context, body PostQueryNodeclaimJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryNodeclaimResponse, error)

	// PostQueryNodeclaims request with any body
	PostQueryNodeclaimsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryNodeclaimsResponse, error)

	PostQueryNodeclaimsWithResponse(ctx context.Context, body PostQueryNodeclaimsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryNodeclaimsResponse, error)

	// PostQueryNodeparams request with any body
	PostQueryNodeparamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryNodeparamsResponse, error)

	PostQueryNodeparamsWithResponse(ctx context.Context, body PostQueryNodeparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryNodeparamsResponse, error)

	// PostQueryNodes request with any body
	PostQueryNodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryNodesResponse, error)

	PostQueryNodesWithResponse(ctx context.Context, body PostQueryNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryNodesResponse, error)

	// PostQueryParam request with any body
	PostQueryParamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryParamResponse, error)

	PostQueryParamWithResponse(ctx context.Context, body PostQueryParamJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryParamResponse, error)

	// PostQueryPocketparams request with any body
	PostQueryPocketparamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryPocketparamsResponse, error)

	PostQueryPocketparamsWithResponse(ctx context.Context, body PostQueryPocketparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryPocketparamsResponse, error)

	// PostQuerySigninginfo request with any body
	PostQuerySigninginfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQuerySigninginfoResponse, error)

	PostQuerySigninginfoWithResponse(ctx context.Context, body PostQuerySigninginfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQuerySigninginfoResponse, error)

	// PostQueryState request with any body
	PostQueryStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryStateResponse, error)

	PostQueryStateWithResponse(ctx context.Context, body PostQueryStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryStateResponse, error)

	// PostQuerySupply request with any body
	PostQuerySupplyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQuerySupplyResponse, error)

	PostQuerySupplyWithResponse(ctx context.Context, body PostQuerySupplyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQuerySupplyResponse, error)

	// PostQuerySupportedchains request with any body
	PostQuerySupportedchainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQuerySupportedchainsResponse, error)

	PostQuerySupportedchainsWithResponse(ctx context.Context, body PostQuerySupportedchainsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQuerySupportedchainsResponse, error)

	// PostQueryTx request with any body
	PostQueryTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryTxResponse, error)

	PostQueryTxWithResponse(ctx context.Context, body PostQueryTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryTxResponse, error)

	// PostQueryUpgrade request with any body
	PostQueryUpgradeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryUpgradeResponse, error)

	PostQueryUpgradeWithResponse(ctx context.Context, body PostQueryUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryUpgradeResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientChallengeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryChallengeResponse
}

// Status returns HTTPResponse.Status
func (r PostClientChallengeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientChallengeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientDispatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryDispatchResponse
}

// Status returns HTTPResponse.Status
func (r PostClientDispatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientDispatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientRawtxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryRawTXResponse
}

// Status returns HTTPResponse.Status
func (r PostClientRawtxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientRawtxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientRelayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryRelayResponse
	JSON400      *QueryErrorRelayResponse
}

// Status returns HTTPResponse.Status
func (r PostClientRelayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientRelayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientSimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientSimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientSimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPrivateStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// The error code.
		Code *int `json:"code,omitempty"`

		// The error msg.
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostPrivateStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPrivateStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r PostQueryAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryAccounttxsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryAccountTXsResponse
}

// Status returns HTTPResponse.Status
func (r PostQueryAccounttxsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryAccounttxsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryAllParamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllParams
}

// Status returns HTTPResponse.Status
func (r PostQueryAllParamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryAllParamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r PostQueryAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryAppparamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationParams
}

// Status returns HTTPResponse.Status
func (r PostQueryAppparamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryAppparamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryAppsResponse
}

// Status returns HTTPResponse.Status
func (r PostQueryAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryBalanceResponse
}

// Status returns HTTPResponse.Status
func (r PostQueryBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryBlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryBlockResponse
}

// Status returns HTTPResponse.Status
func (r PostQueryBlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryBlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryBlocktxsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryBlockTXsResponse
}

// Status returns HTTPResponse.Status
func (r PostQueryBlocktxsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryBlocktxsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryHeightResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryHeightResponse
}

// Status returns HTTPResponse.Status
func (r PostQueryHeightResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryHeightResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Node
}

// Status returns HTTPResponse.Status
func (r PostQueryNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryNodeclaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoredReceipt
}

// Status returns HTTPResponse.Status
func (r PostQueryNodeclaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryNodeclaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryNodeclaimsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryNodeClaimsResponse
}

// Status returns HTTPResponse.Status
func (r PostQueryNodeclaimsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryNodeclaimsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryNodeparamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeParams
}

// Status returns HTTPResponse.Status
func (r PostQueryNodeparamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryNodeparamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryNodesResponse
}

// Status returns HTTPResponse.Status
func (r PostQueryNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleParam
}

// Status returns HTTPResponse.Status
func (r PostQueryParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryPocketparamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PocketParams
}

// Status returns HTTPResponse.Status
func (r PostQueryPocketparamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryPocketparamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQuerySigninginfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QuerySigningInfoResponse
}

// Status returns HTTPResponse.Status
func (r PostQuerySigninginfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQuerySigninginfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostQueryStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQuerySupplyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QuerySupplyResponse
}

// Status returns HTTPResponse.Status
func (r PostQuerySupplyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQuerySupplyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQuerySupportedchainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QuerySupportedChainsResponse
}

// Status returns HTTPResponse.Status
func (r PostQuerySupportedchainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQuerySupportedchainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryTxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryTXResponse
}

// Status returns HTTPResponse.Status
func (r PostQueryTxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryTxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueryUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpgradeResponse
}

// Status returns HTTPResponse.Status
func (r PostQueryUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueryUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// PostClientChallengeWithBodyWithResponse request with arbitrary body returning *PostClientChallengeResponse
func (c *ClientWithResponses) PostClientChallengeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientChallengeResponse, error) {
	rsp, err := c.PostClientChallengeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientChallengeResponse(rsp)
}

func (c *ClientWithResponses) PostClientChallengeWithResponse(ctx context.Context, body PostClientChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientChallengeResponse, error) {
	rsp, err := c.PostClientChallenge(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientChallengeResponse(rsp)
}

// PostClientDispatchWithBodyWithResponse request with arbitrary body returning *PostClientDispatchResponse
func (c *ClientWithResponses) PostClientDispatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientDispatchResponse, error) {
	rsp, err := c.PostClientDispatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientDispatchResponse(rsp)
}

func (c *ClientWithResponses) PostClientDispatchWithResponse(ctx context.Context, body PostClientDispatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientDispatchResponse, error) {
	rsp, err := c.PostClientDispatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientDispatchResponse(rsp)
}

// PostClientRawtxWithBodyWithResponse request with arbitrary body returning *PostClientRawtxResponse
func (c *ClientWithResponses) PostClientRawtxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientRawtxResponse, error) {
	rsp, err := c.PostClientRawtxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientRawtxResponse(rsp)
}

func (c *ClientWithResponses) PostClientRawtxWithResponse(ctx context.Context, body PostClientRawtxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientRawtxResponse, error) {
	rsp, err := c.PostClientRawtx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientRawtxResponse(rsp)
}

// PostClientRelayWithBodyWithResponse request with arbitrary body returning *PostClientRelayResponse
func (c *ClientWithResponses) PostClientRelayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientRelayResponse, error) {
	rsp, err := c.PostClientRelayWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientRelayResponse(rsp)
}

func (c *ClientWithResponses) PostClientRelayWithResponse(ctx context.Context, body PostClientRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientRelayResponse, error) {
	rsp, err := c.PostClientRelay(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientRelayResponse(rsp)
}

// PostClientSimWithBodyWithResponse request with arbitrary body returning *PostClientSimResponse
func (c *ClientWithResponses) PostClientSimWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientSimResponse, error) {
	rsp, err := c.PostClientSimWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientSimResponse(rsp)
}

func (c *ClientWithResponses) PostClientSimWithResponse(ctx context.Context, body PostClientSimJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientSimResponse, error) {
	rsp, err := c.PostClientSim(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientSimResponse(rsp)
}

// PostPrivateStopWithResponse request returning *PostPrivateStopResponse
func (c *ClientWithResponses) PostPrivateStopWithResponse(ctx context.Context, params *PostPrivateStopParams, reqEditors ...RequestEditorFn) (*PostPrivateStopResponse, error) {
	rsp, err := c.PostPrivateStop(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPrivateStopResponse(rsp)
}

// PostQueryAccountWithBodyWithResponse request with arbitrary body returning *PostQueryAccountResponse
func (c *ClientWithResponses) PostQueryAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAccountResponse, error) {
	rsp, err := c.PostQueryAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAccountResponse(rsp)
}

func (c *ClientWithResponses) PostQueryAccountWithResponse(ctx context.Context, body PostQueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAccountResponse, error) {
	rsp, err := c.PostQueryAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAccountResponse(rsp)
}

// PostQueryAccounttxsWithBodyWithResponse request with arbitrary body returning *PostQueryAccounttxsResponse
func (c *ClientWithResponses) PostQueryAccounttxsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAccounttxsResponse, error) {
	rsp, err := c.PostQueryAccounttxsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAccounttxsResponse(rsp)
}

func (c *ClientWithResponses) PostQueryAccounttxsWithResponse(ctx context.Context, body PostQueryAccounttxsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAccounttxsResponse, error) {
	rsp, err := c.PostQueryAccounttxs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAccounttxsResponse(rsp)
}

// PostQueryAllParamsWithBodyWithResponse request with arbitrary body returning *PostQueryAllParamsResponse
func (c *ClientWithResponses) PostQueryAllParamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAllParamsResponse, error) {
	rsp, err := c.PostQueryAllParamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAllParamsResponse(rsp)
}

func (c *ClientWithResponses) PostQueryAllParamsWithResponse(ctx context.Context, body PostQueryAllParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAllParamsResponse, error) {
	rsp, err := c.PostQueryAllParams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAllParamsResponse(rsp)
}

// PostQueryAppWithBodyWithResponse request with arbitrary body returning *PostQueryAppResponse
func (c *ClientWithResponses) PostQueryAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAppResponse, error) {
	rsp, err := c.PostQueryAppWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAppResponse(rsp)
}

func (c *ClientWithResponses) PostQueryAppWithResponse(ctx context.Context, body PostQueryAppJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAppResponse, error) {
	rsp, err := c.PostQueryApp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAppResponse(rsp)
}

// PostQueryAppparamsWithBodyWithResponse request with arbitrary body returning *PostQueryAppparamsResponse
func (c *ClientWithResponses) PostQueryAppparamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAppparamsResponse, error) {
	rsp, err := c.PostQueryAppparamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAppparamsResponse(rsp)
}

func (c *ClientWithResponses) PostQueryAppparamsWithResponse(ctx context.Context, body PostQueryAppparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAppparamsResponse, error) {
	rsp, err := c.PostQueryAppparams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAppparamsResponse(rsp)
}

// PostQueryAppsWithBodyWithResponse request with arbitrary body returning *PostQueryAppsResponse
func (c *ClientWithResponses) PostQueryAppsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryAppsResponse, error) {
	rsp, err := c.PostQueryAppsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAppsResponse(rsp)
}

func (c *ClientWithResponses) PostQueryAppsWithResponse(ctx context.Context, body PostQueryAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryAppsResponse, error) {
	rsp, err := c.PostQueryApps(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryAppsResponse(rsp)
}

// PostQueryBalanceWithBodyWithResponse request with arbitrary body returning *PostQueryBalanceResponse
func (c *ClientWithResponses) PostQueryBalanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryBalanceResponse, error) {
	rsp, err := c.PostQueryBalanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryBalanceResponse(rsp)
}

func (c *ClientWithResponses) PostQueryBalanceWithResponse(ctx context.Context, body PostQueryBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryBalanceResponse, error) {
	rsp, err := c.PostQueryBalance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryBalanceResponse(rsp)
}

// PostQueryBlockWithBodyWithResponse request with arbitrary body returning *PostQueryBlockResponse
func (c *ClientWithResponses) PostQueryBlockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryBlockResponse, error) {
	rsp, err := c.PostQueryBlockWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryBlockResponse(rsp)
}

func (c *ClientWithResponses) PostQueryBlockWithResponse(ctx context.Context, body PostQueryBlockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryBlockResponse, error) {
	rsp, err := c.PostQueryBlock(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryBlockResponse(rsp)
}

// PostQueryBlocktxsWithBodyWithResponse request with arbitrary body returning *PostQueryBlocktxsResponse
func (c *ClientWithResponses) PostQueryBlocktxsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryBlocktxsResponse, error) {
	rsp, err := c.PostQueryBlocktxsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryBlocktxsResponse(rsp)
}

func (c *ClientWithResponses) PostQueryBlocktxsWithResponse(ctx context.Context, body PostQueryBlocktxsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryBlocktxsResponse, error) {
	rsp, err := c.PostQueryBlocktxs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryBlocktxsResponse(rsp)
}

// PostQueryHeightWithBodyWithResponse request with arbitrary body returning *PostQueryHeightResponse
func (c *ClientWithResponses) PostQueryHeightWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryHeightResponse, error) {
	rsp, err := c.PostQueryHeightWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryHeightResponse(rsp)
}

func (c *ClientWithResponses) PostQueryHeightWithResponse(ctx context.Context, body PostQueryHeightJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryHeightResponse, error) {
	rsp, err := c.PostQueryHeight(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryHeightResponse(rsp)
}

// PostQueryNodeWithBodyWithResponse request with arbitrary body returning *PostQueryNodeResponse
func (c *ClientWithResponses) PostQueryNodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryNodeResponse, error) {
	rsp, err := c.PostQueryNodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryNodeResponse(rsp)
}

func (c *ClientWithResponses) PostQueryNodeWithResponse(ctx context.Context, body PostQueryNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryNodeResponse, error) {
	rsp, err := c.PostQueryNode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryNodeResponse(rsp)
}

// PostQueryNodeclaimWithBodyWithResponse request with arbitrary body returning *PostQueryNodeclaimResponse
func (c *ClientWithResponses) PostQueryNodeclaimWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryNodeclaimResponse, error) {
	rsp, err := c.PostQueryNodeclaimWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryNodeclaimResponse(rsp)
}

func (c *ClientWithResponses) PostQueryNodeclaimWithResponse(ctx context.Context, body PostQueryNodeclaimJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryNodeclaimResponse, error) {
	rsp, err := c.PostQueryNodeclaim(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryNodeclaimResponse(rsp)
}

// PostQueryNodeclaimsWithBodyWithResponse request with arbitrary body returning *PostQueryNodeclaimsResponse
func (c *ClientWithResponses) PostQueryNodeclaimsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryNodeclaimsResponse, error) {
	rsp, err := c.PostQueryNodeclaimsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryNodeclaimsResponse(rsp)
}

func (c *ClientWithResponses) PostQueryNodeclaimsWithResponse(ctx context.Context, body PostQueryNodeclaimsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryNodeclaimsResponse, error) {
	rsp, err := c.PostQueryNodeclaims(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryNodeclaimsResponse(rsp)
}

// PostQueryNodeparamsWithBodyWithResponse request with arbitrary body returning *PostQueryNodeparamsResponse
func (c *ClientWithResponses) PostQueryNodeparamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryNodeparamsResponse, error) {
	rsp, err := c.PostQueryNodeparamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryNodeparamsResponse(rsp)
}

func (c *ClientWithResponses) PostQueryNodeparamsWithResponse(ctx context.Context, body PostQueryNodeparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryNodeparamsResponse, error) {
	rsp, err := c.PostQueryNodeparams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryNodeparamsResponse(rsp)
}

// PostQueryNodesWithBodyWithResponse request with arbitrary body returning *PostQueryNodesResponse
func (c *ClientWithResponses) PostQueryNodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryNodesResponse, error) {
	rsp, err := c.PostQueryNodesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryNodesResponse(rsp)
}

func (c *ClientWithResponses) PostQueryNodesWithResponse(ctx context.Context, body PostQueryNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryNodesResponse, error) {
	rsp, err := c.PostQueryNodes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryNodesResponse(rsp)
}

// PostQueryParamWithBodyWithResponse request with arbitrary body returning *PostQueryParamResponse
func (c *ClientWithResponses) PostQueryParamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryParamResponse, error) {
	rsp, err := c.PostQueryParamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryParamResponse(rsp)
}

func (c *ClientWithResponses) PostQueryParamWithResponse(ctx context.Context, body PostQueryParamJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryParamResponse, error) {
	rsp, err := c.PostQueryParam(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryParamResponse(rsp)
}

// PostQueryPocketparamsWithBodyWithResponse request with arbitrary body returning *PostQueryPocketparamsResponse
func (c *ClientWithResponses) PostQueryPocketparamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryPocketparamsResponse, error) {
	rsp, err := c.PostQueryPocketparamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryPocketparamsResponse(rsp)
}

func (c *ClientWithResponses) PostQueryPocketparamsWithResponse(ctx context.Context, body PostQueryPocketparamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryPocketparamsResponse, error) {
	rsp, err := c.PostQueryPocketparams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryPocketparamsResponse(rsp)
}

// PostQuerySigninginfoWithBodyWithResponse request with arbitrary body returning *PostQuerySigninginfoResponse
func (c *ClientWithResponses) PostQuerySigninginfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQuerySigninginfoResponse, error) {
	rsp, err := c.PostQuerySigninginfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQuerySigninginfoResponse(rsp)
}

func (c *ClientWithResponses) PostQuerySigninginfoWithResponse(ctx context.Context, body PostQuerySigninginfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQuerySigninginfoResponse, error) {
	rsp, err := c.PostQuerySigninginfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQuerySigninginfoResponse(rsp)
}

// PostQueryStateWithBodyWithResponse request with arbitrary body returning *PostQueryStateResponse
func (c *ClientWithResponses) PostQueryStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryStateResponse, error) {
	rsp, err := c.PostQueryStateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryStateResponse(rsp)
}

func (c *ClientWithResponses) PostQueryStateWithResponse(ctx context.Context, body PostQueryStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryStateResponse, error) {
	rsp, err := c.PostQueryState(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryStateResponse(rsp)
}

// PostQuerySupplyWithBodyWithResponse request with arbitrary body returning *PostQuerySupplyResponse
func (c *ClientWithResponses) PostQuerySupplyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQuerySupplyResponse, error) {
	rsp, err := c.PostQuerySupplyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQuerySupplyResponse(rsp)
}

func (c *ClientWithResponses) PostQuerySupplyWithResponse(ctx context.Context, body PostQuerySupplyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQuerySupplyResponse, error) {
	rsp, err := c.PostQuerySupply(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQuerySupplyResponse(rsp)
}

// PostQuerySupportedchainsWithBodyWithResponse request with arbitrary body returning *PostQuerySupportedchainsResponse
func (c *ClientWithResponses) PostQuerySupportedchainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQuerySupportedchainsResponse, error) {
	rsp, err := c.PostQuerySupportedchainsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQuerySupportedchainsResponse(rsp)
}

func (c *ClientWithResponses) PostQuerySupportedchainsWithResponse(ctx context.Context, body PostQuerySupportedchainsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQuerySupportedchainsResponse, error) {
	rsp, err := c.PostQuerySupportedchains(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQuerySupportedchainsResponse(rsp)
}

// PostQueryTxWithBodyWithResponse request with arbitrary body returning *PostQueryTxResponse
func (c *ClientWithResponses) PostQueryTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryTxResponse, error) {
	rsp, err := c.PostQueryTxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryTxResponse(rsp)
}

func (c *ClientWithResponses) PostQueryTxWithResponse(ctx context.Context, body PostQueryTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryTxResponse, error) {
	rsp, err := c.PostQueryTx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryTxResponse(rsp)
}

// PostQueryUpgradeWithBodyWithResponse request with arbitrary body returning *PostQueryUpgradeResponse
func (c *ClientWithResponses) PostQueryUpgradeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueryUpgradeResponse, error) {
	rsp, err := c.PostQueryUpgradeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryUpgradeResponse(rsp)
}

func (c *ClientWithResponses) PostQueryUpgradeWithResponse(ctx context.Context, body PostQueryUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueryUpgradeResponse, error) {
	rsp, err := c.PostQueryUpgrade(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueryUpgradeResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostClientChallengeResponse parses an HTTP response from a PostClientChallengeWithResponse call
func ParsePostClientChallengeResponse(rsp *http.Response) (*PostClientChallengeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientChallengeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryChallengeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientDispatchResponse parses an HTTP response from a PostClientDispatchWithResponse call
func ParsePostClientDispatchResponse(rsp *http.Response) (*PostClientDispatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientDispatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryDispatchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientRawtxResponse parses an HTTP response from a PostClientRawtxWithResponse call
func ParsePostClientRawtxResponse(rsp *http.Response) (*PostClientRawtxResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientRawtxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryRawTXResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientRelayResponse parses an HTTP response from a PostClientRelayWithResponse call
func ParsePostClientRelayResponse(rsp *http.Response) (*PostClientRelayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientRelayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryRelayResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest QueryErrorRelayResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParsePostClientSimResponse parses an HTTP response from a PostClientSimWithResponse call
func ParsePostClientSimResponse(rsp *http.Response) (*PostClientSimResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientSimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPrivateStopResponse parses an HTTP response from a PostPrivateStopWithResponse call
func ParsePostPrivateStopResponse(rsp *http.Response) (*PostPrivateStopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPrivateStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// The error code.
			Code *int `json:"code,omitempty"`

			// The error msg.
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostQueryAccountResponse parses an HTTP response from a PostQueryAccountWithResponse call
func ParsePostQueryAccountResponse(rsp *http.Response) (*PostQueryAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryAccounttxsResponse parses an HTTP response from a PostQueryAccounttxsWithResponse call
func ParsePostQueryAccounttxsResponse(rsp *http.Response) (*PostQueryAccounttxsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryAccounttxsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryAccountTXsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryAllParamsResponse parses an HTTP response from a PostQueryAllParamsWithResponse call
func ParsePostQueryAllParamsResponse(rsp *http.Response) (*PostQueryAllParamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryAllParamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllParams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryAppResponse parses an HTTP response from a PostQueryAppWithResponse call
func ParsePostQueryAppResponse(rsp *http.Response) (*PostQueryAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryAppparamsResponse parses an HTTP response from a PostQueryAppparamsWithResponse call
func ParsePostQueryAppparamsResponse(rsp *http.Response) (*PostQueryAppparamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryAppparamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationParams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryAppsResponse parses an HTTP response from a PostQueryAppsWithResponse call
func ParsePostQueryAppsResponse(rsp *http.Response) (*PostQueryAppsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryAppsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryBalanceResponse parses an HTTP response from a PostQueryBalanceWithResponse call
func ParsePostQueryBalanceResponse(rsp *http.Response) (*PostQueryBalanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryBalanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryBlockResponse parses an HTTP response from a PostQueryBlockWithResponse call
func ParsePostQueryBlockResponse(rsp *http.Response) (*PostQueryBlockResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryBlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryBlockResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryBlocktxsResponse parses an HTTP response from a PostQueryBlocktxsWithResponse call
func ParsePostQueryBlocktxsResponse(rsp *http.Response) (*PostQueryBlocktxsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryBlocktxsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryBlockTXsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryHeightResponse parses an HTTP response from a PostQueryHeightWithResponse call
func ParsePostQueryHeightResponse(rsp *http.Response) (*PostQueryHeightResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryHeightResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryHeightResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryNodeResponse parses an HTTP response from a PostQueryNodeWithResponse call
func ParsePostQueryNodeResponse(rsp *http.Response) (*PostQueryNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryNodeclaimResponse parses an HTTP response from a PostQueryNodeclaimWithResponse call
func ParsePostQueryNodeclaimResponse(rsp *http.Response) (*PostQueryNodeclaimResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryNodeclaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoredReceipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryNodeclaimsResponse parses an HTTP response from a PostQueryNodeclaimsWithResponse call
func ParsePostQueryNodeclaimsResponse(rsp *http.Response) (*PostQueryNodeclaimsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryNodeclaimsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryNodeClaimsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryNodeparamsResponse parses an HTTP response from a PostQueryNodeparamsWithResponse call
func ParsePostQueryNodeparamsResponse(rsp *http.Response) (*PostQueryNodeparamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryNodeparamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeParams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryNodesResponse parses an HTTP response from a PostQueryNodesWithResponse call
func ParsePostQueryNodesResponse(rsp *http.Response) (*PostQueryNodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryParamResponse parses an HTTP response from a PostQueryParamWithResponse call
func ParsePostQueryParamResponse(rsp *http.Response) (*PostQueryParamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleParam
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryPocketparamsResponse parses an HTTP response from a PostQueryPocketparamsWithResponse call
func ParsePostQueryPocketparamsResponse(rsp *http.Response) (*PostQueryPocketparamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryPocketparamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PocketParams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQuerySigninginfoResponse parses an HTTP response from a PostQuerySigninginfoWithResponse call
func ParsePostQuerySigninginfoResponse(rsp *http.Response) (*PostQuerySigninginfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQuerySigninginfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QuerySigningInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryStateResponse parses an HTTP response from a PostQueryStateWithResponse call
func ParsePostQueryStateResponse(rsp *http.Response) (*PostQueryStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostQuerySupplyResponse parses an HTTP response from a PostQuerySupplyWithResponse call
func ParsePostQuerySupplyResponse(rsp *http.Response) (*PostQuerySupplyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQuerySupplyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QuerySupplyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQuerySupportedchainsResponse parses an HTTP response from a PostQuerySupportedchainsWithResponse call
func ParsePostQuerySupportedchainsResponse(rsp *http.Response) (*PostQuerySupportedchainsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQuerySupportedchainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QuerySupportedChainsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryTxResponse parses an HTTP response from a PostQueryTxWithResponse call
func ParsePostQueryTxResponse(rsp *http.Response) (*PostQueryTxResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryTxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryTXResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueryUpgradeResponse parses an HTTP response from a PostQueryUpgradeWithResponse call
func ParsePostQueryUpgradeResponse(rsp *http.Response) (*PostQueryUpgradeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueryUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpgradeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
